#!/usr/bin/env Rscript

suppressPackageStartupMessages(library("argparse"))
suppressPackageStartupMessages(library("tidyverse"))
suppressPackageStartupMessages(library("cowplot"))


initial_args = commandArgs (trailingOnly = FALSE)
file_arg_name <- "--file="
script_name <- sub(file_arg_name, "", initial_args[grep(file_arg_name, initial_args)])

source(file.path(dirname(script_name), "Rlib/RT_artifact_funcs.R"))

parser = ArgumentParser()
parser$add_argument("--fusion_preds_tsv", help="fusion prediction info in FusionInspector tsv format", required=TRUE, nargs=1)
parser$add_argument("--microhomologies_tsv", help="fusion contig microhomologies", required=TRUE, nargs=1)
parser$add_argument("--plots_dir", help="directory for writing plot pdf files", required=TRUE, nargs=1)


args = parser$parse_args()

fusion_preds_tsv = args$fusion_preds_tsv
microhomologies_tsv = args$microhomologies_tsv
plots_dir = args$plots_dir

if (! file.exists(plots_dir)) {
    dir.create(plots_dir)
}



########
## main:

####################
## parse fusion data
fusion_preds = read.table(fusion_preds_tsv, header=T, row.names=NULL, sep="\t", stringsAsFactors=F, com='')
colnames(fusion_preds) = str_replace(colnames(fusion_preds), "^X\\.", "")

## add splice type info for consenus vs. non-consensus dinucleotides

fusion_preds = fusion_preds %>% mutate(SpliceDinuc=ifelse(LeftBreakDinuc %in% c("GT", "GC") & RightBreakDinuc == "AG", "Consensus", "Non"))

grouped_fusion_preds = split(x=fusion_preds, f=fusion_preds$FusionName)
fusion_names = names(grouped_fusion_preds)


## parse microhomolgy data
microhomologies = read.table(microhomologies_tsv, header=T, row.names=NULL, sep="\t", stringsAsFactors=F)
grouped_microhomologies = split(x=microhomologies, f=microhomologies$contig)


for (fusion_name in fusion_names) {


    message("processing: ", fusion_name)

    pdf(file.path(plots_dir, paste0(fusion_name, ".pre-vs-post-EM.pdf")))

    fusion_preds_data = grouped_fusion_preds[[fusion_name]]


    ## make breakpoint plot
    fusion_pair_microhomologies = grouped_microhomologies[[fusion_name]]

    ## Post-EM
    p_post = breakpoint_plot(fusion_preds_data, fusion_pair_microhomologies,
                             title=paste0(fusion_name, "post-EM FFPM"), "FFPM")

    ## recompute the FFPM based on the original pre-EM counts:
    fusion_preds_data = fusion_preds_data %>% mutate(sum_frags =  est_J + est_S)
    total_M_reads = median(fusion_preds_data$sum_frags/fusion_preds_data$FFPM)
    message("total_M_reads estimated at: ", total_M_reads)

    ## redefine sum frags based on the earlier Junction and Spanning rad counts.
    fusion_preds_data = fusion_preds_data %>% mutate(sum_frags =  JunctionReadCount + SpanningFragCount)

    fusion_preds_data$FFPM = fusion_preds_data$sum_frags/total_M_reads


    ## Pre-EM
    p_pre = breakpoint_plot(fusion_preds_data, fusion_pair_microhomologies,
                            title=paste0(fusion_name, "pre-EM FFPM"), "FFPM")


    pg = plot_grid(p_pre, p_post, ncol=1, rel_heights=c(0.5, 0.5))
    plot(pg)



    dev.off()
}

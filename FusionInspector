#!/usr/bin/env python
# encoding: utf-8


from __future__ import (absolute_import, division,
                                                print_function, unicode_literals)


import os, re, sys
sys.path.insert(0, os.path.sep.join([os.path.dirname(os.path.realpath(__file__)), "SciEDPipeR"]))
sys.path.insert(0, os.path.sep.join([os.path.dirname(os.path.realpath(__file__)), "SciEDPipeR", "sciedpiper"]))
print(sys.path, file=sys.stderr)
import sciedpiper.Command as Command
import sciedpiper.PipelineRunner as PipelineRunner


__example__ = "FusionInspector --left_fq ../BT474--ACACA--STAC2.left.fq --right_fq ../BT474--ACACA--STAC2.right.fq \
              --align_utils STAR,GSNAP,HISAT --fusions fusion_gene_candidates.dat --out_dir myoutdir --out_prefix ladeda"



VERSION = "v0.9.0beta"


UTILDIR = os.sep.join([os.path.dirname(__file__), "util"])

## Trinity is required, as we use the kmer counting functionality in the read filter step.
if not os.environ.has_key('TRINITY_HOME'):
    print >> sys.stderr, "Error, need TRINITY_HOME environmental variable set and pointing to Trinity installation directory"
    sys.exit(2)

TRINITY_HOME = os.environ["TRINITY_HOME"]
    

class FusionInspector( PipelineRunner.PipelineRunner ):
    
    def func_update_arguments(self, arg_raw ):
        """
        Updates to the arg parser, command line options
        
        * arg_raw : Arguments ( not yet parsed )
                  : Arguments
        * return  : Updated Arguments
                  : Arguments
        """

        arg_raw.prog = "FusionInspector"
        arg_raw.description = "Extracts a pair of genes from the genome, creates a mini-contig, aligns reads to the mini-contig, and extracts the fusion reads as a separate tier for vsiualization."

        arg_raw.add_argument("--fusions", dest="chim_summary_files", type=str, default="", required=True,
                             help="fusions summary files (list, comma-delimited and no spaces)")
        arg_raw.add_argument("--genome_lib_dir", dest="genome_lib_dir", type=str, default="", required=True,
                             help="genome lib directory - see http://FusionFilter.github.io for details")
        arg_raw.add_argument("--left_fq", dest="left_fq_filename", type=str, required=True, help="left fastq file")
        arg_raw.add_argument("--right_fq", dest="right_fq_filename", type=str, required=True, help="right fastq file")
        arg_raw.add_argument("--out_dir", dest="str_out_dir", type=str, required=True, help="output directory")
        arg_raw.add_argument("--out_prefix", dest="out_prefix", type=str, required=True, help="output filename prefix")
        arg_raw.add_argument("--align_utils", dest="align_utils", type=str, required=False, default="STAR",
                             help="alignment utilities to use.") # Comma-delimited selection of: STAR,GSNAP,HISAT")
        
        arg_raw.add_argument("--min_junction_reads", dest="min_junction_reads", type=int, required=False, default=1,
                             help="minimum number of junction-spanning reads required")
        arg_raw.add_argument("--min_sum_frags", dest="min_sum_frags", type=int, required=False, default=2,
                             help="minimum fusion support = ( # junction_reads + # spanning_frags )")
        arg_raw.add_argument("--min_novel_junction_support", dest="min_novel_junction_support", type=int, required=False, default=3,
                             help="(minimum number of junction reads required if breakpoint lacks involvement of only reference junctions")
        arg_raw.add_argument("--require_LDAS", type=int, required=False, default=1,
                             help = "require long double anchor support for split reads when no spanning frags are found")
        

        arg_raw.add_argument("--max_promiscuity", dest='max_promiscuity', type=int, required=False, default=3,
                             help="maximum number of partners allowed for a given fusion")
        arg_raw.add_argument("-E", "--Evalue", dest='Evalue', type=float, required=False, default=0.001,
                             help="E-value threshold for blast searches")
        arg_raw.add_argument("--min_per_id", dest="min_per_id", type=int, required=False, default=97,
                             help='minimum percent identity for a fusion-supporting read alignment')
        
        arg_raw.add_argument("--only_fusion_reads", default=False, action='store_true',
                             help="include only read alignments in output that support fusion" )
        
        arg_raw.add_argument("--capture_genome_alignments", default=False, action='store_true',
                             help='reports ref genome alignments too (for debugging only)')
                        
        arg_raw.add_argument("--include_Trinity", dest="include_Trinity", required=False, action = "store_true", default=False,
                             help="include fusion-guided Trinity assembly")

        arg_raw.add_argument("--prep_for_IGV", dest="prep_for_IGV", required=False, action="store_true", default=False,
                             help="generate bam, bed, etc., for use with IGV")
        arg_raw.add_argument("--write_intermediate_results", dest="write_intermediate_results", required=False, action="store_true",
                             default=False, help="generate bam, bed, etc., for intermediate aligner outputs")

        arg_raw.add_argument("--no_cleanup", dest="no_cleanup", required=False, action="store_true", default=False,
                             help="do not cleanup the fusion inspector workspace, retain intermediate output files")

        arg_raw.add_argument("--version", dest='version', required=False, action='store_true', default=False,
                             help="show version string: " + VERSION)

        arg_raw.add_argument("--CPU", dest="CPU", required=False, type=int, default=4,
                             help="Number of threads for running the aligner")

        arg_raw.add_argument("--dirty", action='store_true', default=False,
                             help='turn off FP filtering for non-STAR methods (increases speed, reduces RAM, mostly restricted for testing purposes)')

        arg_raw.add_argument("--aligner_path", default=None, type=str, help="path to the aligner tool (default: uses PATH setting)")

        return(arg_raw)

        
    def func_make_commands( self, args_parsed, cur_pipeline ):
        """
        Allows:
        - the creation of commands in the child object.
        - the creation of directories.
        - checking that files exist.
        
        To know the variables available from command line look in the ParentScript in func_create_arguments.
        """

        if args_parsed.version:
            print("\n\nFusionInspector Version: " + VERSION + "\n\n")
            sys.exit(0)
                
        
        genome_lib_dir = args_parsed.genome_lib_dir
        genome_lib_dir = os.path.abspath(genome_lib_dir)
        
        args_parsed.gtf_filename = os.path.sep.join([genome_lib_dir, "ref_annot.gtf"])
        args_parsed.genome_fasta_filename = os.path.sep.join([genome_lib_dir, "ref_genome.fa"])
        args_parsed.cdna_fasta_filename = os.path.sep.join([genome_lib_dir, "ref_cdna.fasta"])

        args_parsed.str_out_dir = os.path.abspath(args_parsed.str_out_dir)
        
        workdir = args_parsed.str_out_dir + "/fi_workdir";
        workdir = os.path.abspath(workdir)
                
        
        chim_summary_files_list = args_parsed.chim_summary_files.split(",")
        
        chim_summary_files_adj = []
        for chim_summary_file in chim_summary_files_list:
            if os.stat(chim_summary_file).st_size == 0:
                print >>sys.stderr, "Warning: No list of fusions in file: %s" % chim_summary_file
            else:
                chim_summary_files_adj.append(chim_summary_file)

        chim_summary_files_list = chim_summary_files_adj

        if not chim_summary_files_list:
            print >>sys.stderr, "All fusion files: %s are empty. Exiting gracefully." % args_parsed.chim_summary_files
            sys.exit(0)

        
        cur_pipeline.func_check_files_exist( [ args_parsed.left_fq_filename, args_parsed.right_fq_filename,
                                               args_parsed.gtf_filename, args_parsed.genome_fasta_filename,
                                               args_parsed.left_fq_filename, args_parsed.right_fq_filename] +
                                             chim_summary_files_list )
        

        ## Construct the list of pipeline commands
        
        lcmd_commands = []

        ## Build the mini-contig containing just the two fusion genes, plus annotations in gtf format

        chim_summary_files = args_parsed.chim_summary_files.split(',')
        
        cmdstr = str( os.sep.join([UTILDIR, "fusion_pair_to_mini_genome_join.pl"]) +
                      " --fusions " + args_parsed.chim_summary_files +
                      " --gtf " + args_parsed.gtf_filename +
                      " --genome_fa " + args_parsed.genome_fasta_filename +
                      " --shrink_introns --max_intron_length 1000 " +
                      " --out_prefix " + os.sep.join([args_parsed.str_out_dir, args_parsed.out_prefix] ) )
        
        mergedContig_fasta_filename = os.sep.join([args_parsed.str_out_dir, args_parsed.out_prefix + ".fa"])
        mergedContig_gtf_filename = os.sep.join([args_parsed.str_out_dir, args_parsed.out_prefix + ".gtf"])
        
        lcmd_commands.append( Command.Command( str_cur_command = cmdstr,
                                               lstr_cur_dependencies = [args_parsed.gtf_filename, args_parsed.genome_fasta_filename] + chim_summary_files,
                                               lstr_cur_products = [ mergedContig_fasta_filename, mergedContig_gtf_filename ] ) )


        # symlink them in the workdir
        workdir_mergedContig_fasta_filename = os.sep.join([workdir, args_parsed.out_prefix + ".fa"])
        lcmd_commands.append( Command.Command( str_cur_command = "ln -s " + mergedContig_fasta_filename +
                                               " " + workdir_mergedContig_fasta_filename,
                                               lstr_cur_dependencies = [ mergedContig_fasta_filename ],
                                               lstr_cur_products = [ workdir_mergedContig_fasta_filename ] ) )
        
        workdir_mergedContig_gtf_filename = os.sep.join([workdir, args_parsed.out_prefix + ".gtf"])
        lcmd_commands.append( Command.Command( str_cur_command = "ln -s " + mergedContig_gtf_filename +
                                               " " + workdir_mergedContig_gtf_filename,
                                               lstr_cur_dependencies = [ mergedContig_gtf_filename ],
                                               lstr_cur_products = [ workdir_mergedContig_gtf_filename ] ) )

        
        ## build a cytoband file
        cytoband_file = os.sep.join([args_parsed.str_out_dir, "cytoBand.txt"])
        cmdstr = str( os.sep.join([UTILDIR, "fasta_and_gtf_to_cytoband.pl"]) +
                      " " + mergedContig_fasta_filename + " " + mergedContig_gtf_filename +
                      " > " + cytoband_file )

        lcmd_commands.append( Command.Command( str_cur_command = cmdstr,
                                               lstr_cur_dependencies = [ mergedContig_fasta_filename, mergedContig_gtf_filename ],
                                               lstr_cur_products = [ cytoband_file ] ) )
        
        

        ## Convert the gtf to bed format for easier viewing
        mergedContig_bed_filename = os.sep.join([args_parsed.str_out_dir, args_parsed.out_prefix + ".bed"])
        
        cmdstr = str(UTILDIR + "/gtf_gene_to_bed.pl " + mergedContig_gtf_filename +
                     " > " + mergedContig_bed_filename)
        lcmd_commands.append( Command.Command( str_cur_command = cmdstr,
                                              lstr_cur_dependencies = [mergedContig_gtf_filename],
                                              lstr_cur_products = [mergedContig_bed_filename] ) )

        self.sort_and_index_bed(mergedContig_bed_filename, lcmd_commands)


        # index the fasta file
        cmdstr = str("samtools faidx " + mergedContig_fasta_filename)
        lcmd_commands.append( Command.Command( str_cur_command = cmdstr,
                                               lstr_cur_dependencies = [ mergedContig_fasta_filename ],
                                               lstr_cur_products = [ mergedContig_fasta_filename + ".fai" ] ) )



        filter_FP_reads_flag = True
        if args_parsed.dirty:
            filter_FP_reads_flag = False
        
        bam_files_list = []
        
        if (re.search("GSNAP", args_parsed.align_utils, re.IGNORECASE)):

            ########################################################
            ## align the reads against the fusion contig using GSNAP
            ########################################################

            gsnap_bam_file = os.sep.join([workdir, args_parsed.out_prefix + ".gsnap.cSorted.bam"])

            
            cmdstr = str(UTILDIR + "/run_GSNAP.pl --genome " + workdir_mergedContig_fasta_filename +
                         " --reads \"" +  args_parsed.left_fq_filename + " " + args_parsed.right_fq_filename + "\"" +
                         " -G " + workdir_mergedContig_gtf_filename  + " --CPU " +  str(args_parsed.CPU) + " -N 20 --proper_pairs_only " +
                         " --out_prefix " + os.sep.join([workdir, args_parsed.out_prefix + ".gsnap"]) )
            
            lcmd_commands.append( Command.Command( str_cur_command = cmdstr,
                                                   lstr_cur_dependencies = [ args_parsed.left_fq_filename, args_parsed.right_fq_filename,
                                                                             workdir_mergedContig_fasta_filename, workdir_mergedContig_gtf_filename ],
                                                   lstr_cur_products = [ gsnap_bam_file ] ) )


            ## remove duplicate reads
            gsnap_rmdup_bam_file = os.sep.join([workdir, args_parsed.out_prefix + ".gsnap.cSorted.rmdup.bam"])

            cmdstr = str("samtools rmdup " + gsnap_bam_file + " " + gsnap_rmdup_bam_file + " 2>/dev/null ") # it can be noisy

            lcmd_commands.append( Command.Command( str_cur_command = cmdstr,
                                                   lstr_cur_dependencies = [ gsnap_bam_file ],
                                                   lstr_cur_products = [ gsnap_rmdup_bam_file ] ) )

            self.get_fusion_and_spanning_reads(args_parsed, mergedContig_gtf_filename, mergedContig_fasta_filename, gsnap_rmdup_bam_file, lcmd_commands)

            bam_files_list.append(gsnap_rmdup_bam_file)


        if (re.search("HISAT", args_parsed.align_utils, re.IGNORECASE)):

            ########################################################
            ## align the reads against the fusion contig using HISAT
            ########################################################
            
            cmdstr = str(os.path.sep.join([UTILDIR, "run_HISAT.pl"]) +
                         " --genome " + workdir_mergedContig_fasta_filename +
                         " --reads \"" +  args_parsed.left_fq_filename + " " + args_parsed.right_fq_filename + "\"" +
                         " -G " + workdir_mergedContig_gtf_filename +
                         " --out_prefix " + os.sep.join([workdir, args_parsed.out_prefix + ".hisat"]) +
                         " --CPU " +  str(args_parsed.CPU) + " -N 20 --no-mixed --no-discordant " ) 
            
            hisat_bam_file = os.sep.join([workdir, args_parsed.out_prefix + ".hisat.cSorted.bam"])

            lcmd_commands.append( Command.Command( str_cur_command = cmdstr,
                                                   lstr_cur_dependencies = [ args_parsed.left_fq_filename,
                                                                             args_parsed.right_fq_filename,
                                                                             workdir_mergedContig_gtf_filename,
                                                                             workdir_mergedContig_fasta_filename],
                                                   lstr_cur_products = [ hisat_bam_file ] ) )

            # remove duplicate reads
            hisat_rmdup_bam_file = os.sep.join([workdir, args_parsed.out_prefix + ".hisat.cSorted.rmdup.bam"])

            cmdstr = str("samtools rmdup " + hisat_bam_file + " " + hisat_rmdup_bam_file + " 2>/dev/null ")

            lcmd_commands.append( Command.Command( str_cur_command = cmdstr,
                                                   lstr_cur_dependencies = [ hisat_bam_file ],
                                                   lstr_cur_products = [ hisat_rmdup_bam_file ] ) )



            self.get_fusion_and_spanning_reads(args_parsed, workdir_mergedContig_gtf_filename, workdir_mergedContig_fasta_filename, hisat_rmdup_bam_file, lcmd_commands)

            bam_files_list.append(hisat_rmdup_bam_file)


        if (re.search("STAR", args_parsed.align_utils, re.IGNORECASE)):
        
            filter_FP_reads_flag = False

            ###############
            ## patched fusion-genome for STAR
            ###############

            cmdstr = str( os.path.sep.join([UTILDIR, "run_FI_STAR.pl"]) +
                         " --genome " + args_parsed.genome_fasta_filename +
                         " --patch " + workdir_mergedContig_fasta_filename +
                         " --reads \"" +  args_parsed.left_fq_filename + " " + args_parsed.right_fq_filename + "\"" +
                         " -G " + workdir_mergedContig_gtf_filename + " --CPU " + str(args_parsed.CPU) +  
                         " --out_prefix " + args_parsed.out_prefix + ".star2" +
                         " --out_dir " + workdir )   

            if args_parsed.only_fusion_reads:
                cmdstr += " --only_fusion_reads "
            elif args_parsed.capture_genome_alignments:
                cmdstr += " --capture_genome_alignments "
                        
            if args_parsed.aligner_path:
                cmdstr += " --star_path " + args_parsed.aligner_path

            
            star_bam_file = os.sep.join([workdir, args_parsed.out_prefix + ".star2.sortedByCoord.out.bam"])

            lcmd_commands.append( Command.Command( str_cur_command = cmdstr,
                                                   lstr_cur_dependencies = [ args_parsed.left_fq_filename,
                                                                             args_parsed.right_fq_filename,
                                                                             workdir_mergedContig_gtf_filename,
                                                                             workdir_mergedContig_fasta_filename],
                                                   lstr_cur_products = [ star_bam_file ] ) )

            
            # remove duplicate reads
            star_rmdup_bam_file = os.sep.join([workdir, args_parsed.out_prefix + ".star2.cSorted.rmdup.bam"])

            cmdstr = str("(samtools rmdup " + star_bam_file + " " + star_rmdup_bam_file + " 2>/dev/null) " +
                         " || (cp " + star_bam_file + " " + star_rmdup_bam_file + ")")

            lcmd_commands.append( Command.Command( str_cur_command = cmdstr,
                                                   lstr_cur_dependencies = [ star_bam_file ],
                                                   lstr_cur_products = [ star_rmdup_bam_file ] ) )



            self.get_fusion_and_spanning_reads(args_parsed, workdir_mergedContig_gtf_filename,
                                               workdir_mergedContig_fasta_filename, star_rmdup_bam_file, lcmd_commands)

            bam_files_list.append(star_rmdup_bam_file)

        


        if len(bam_files_list) == 0:
            raise Exception("Error, no alignments were generated. Please revisit your parameter setting to --align_utils ")
        

        
        ###########################
        ## coalesce the fusion info
        ###########################
            
        fusion_summary_pre_read_filter = os.sep.join([workdir, args_parsed.out_prefix + ".fusion_preds.coalesced.pre_read_filter"]) 

        fusion_junction_info_files_list = []
        fusion_junction_reads_list = []
        
        fusion_spanning_info_files_list = []
        fusion_spanning_reads_list = []


        for bam_file in bam_files_list:
            fusion_junction_info_files_list.append(bam_file + ".fusion_junction_info")
            fusion_junction_reads_list.append(bam_file + ".fusion_junc_reads.sam")

            fusion_spanning_info_files_list.append(bam_file + ".fusion_spanning_info")
            fusion_spanning_reads_list.append(bam_file + ".fusion_span_reads.sam")
            
        
        coalesce_cmd = str( os.sep.join([UTILDIR, "coalesce_junction_and_spanning_info.pl"]) + " " +
                            ",".join(fusion_junction_info_files_list) + " " +
                            ",".join(fusion_spanning_info_files_list) +
                            " > " + fusion_summary_pre_read_filter )
        
        
        lcmd_commands.append( Command.Command( str_cur_command = coalesce_cmd,
                                               lstr_cur_dependencies = fusion_junction_info_files_list + 
                                               fusion_spanning_info_files_list,
                                               lstr_cur_products = [ fusion_summary_pre_read_filter ] ) )
        


        ##############################################
        ## Filter out false-positive evidence reads ##
        ##############################################

        fusion_summary_file = os.sep.join([workdir, args_parsed.out_prefix + ".fusion_preds.coalesced.summary"]) 

        if filter_FP_reads_flag:
            filter_FP_reads_cmd = str(os.sep.join([UTILDIR, "filter_FP_evidence_reads.pl"]) + " " +
                                      " --left_fq " + args_parsed.left_fq_filename +
                                      " --right_fq " + args_parsed.right_fq_filename +
                                      " --cdna_fa " + args_parsed.cdna_fasta_filename +
                                      " --fusion_summary " + fusion_summary_pre_read_filter +
                                      " --genome_lib_dir " + genome_lib_dir + 
                                      " --tmpdir " + workdir +
                                      " > " + fusion_summary_file)

            lcmd_commands.append( Command.Command( str_cur_command = filter_FP_reads_cmd,
                                                   lstr_cur_dependencies = [args_parsed.left_fq_filename,
                                                                            args_parsed.right_fq_filename,
                                                                            args_parsed.cdna_fasta_filename,
                                                                            fusion_summary_pre_read_filter
                                                                            ],
                                                   lstr_cur_products = [ fusion_summary_file ] ) )

        else:
            # just symlink it
            cmdstr = "ln -s " + fusion_summary_pre_read_filter + " " + fusion_summary_file

            lcmd_commands.append( Command.Command( str_cur_command = cmdstr,
                                                   lstr_cur_dependencies = [ fusion_summary_pre_read_filter ],
                                                   lstr_cur_products = [ fusion_summary_file ] ) )
        


        ## need to filter based on remaining fusion support.
        fusion_summary_min_score_thresh_file = fusion_summary_file + ".min_frag_thresh"

        filter_by_frag_thresh_cmd = str(os.sep.join([UTILDIR, "filter_fusions_by_frag_thresholds.pl"]) +
                                        " --min_junction_reads " + str(args_parsed.min_junction_reads) +
                                        " --min_sum_frags " + str(args_parsed.min_sum_frags) +
                                        " --min_novel_junction_support " + str(args_parsed.min_novel_junction_support) +
                                        " --fusion_preds " + fusion_summary_file +
                                        " --require_LDAS " + str(args_parsed.require_LDAS) +
                                        " > " + fusion_summary_min_score_thresh_file)
        
        lcmd_commands.append( Command.Command( str_cur_command = filter_by_frag_thresh_cmd,
                                               lstr_cur_dependencies = [fusion_summary_file],
                                               lstr_cur_products = [ fusion_summary_min_score_thresh_file] ) )

        
        if args_parsed.include_Trinity or args_parsed.prep_for_IGV:

            #################################################################
            ## consolidate the Fusion Inspector reads into a single bam files
            #################################################################

            ## Junction reads

            summary_junctions_reads_list_filename = fusion_summary_file + ".fusion_junction_read_accs"
            cmdstr = str(os.sep.join([UTILDIR, "column_extractions.pl"]) +
                         " " + fusion_summary_file +
                         " LeftGene,RightGene,JunctionReads " +
                         " > " + summary_junctions_reads_list_filename)
            
            lcmd_commands.append( Command.Command( str_cur_command = cmdstr,
                                                   lstr_cur_dependencies = [ fusion_summary_file ],
                                                   lstr_cur_products = [ summary_junctions_reads_list_filename ] ) )



            ## //TODO: Separate this into two steps: retrieve, then do bam conversion, to ensure retrieval works via exit code.

            consolidated_junction_reads_bam =  os.sep.join([args_parsed.str_out_dir, args_parsed.out_prefix + ".junction_reads"])
            cmdstr = str(UTILDIR + "/retrieve_fusion_junction_reads_by_accession.pl " + summary_junctions_reads_list_filename
                         + " " + ",".join(fusion_junction_reads_list) +
                         " | samtools view -bT " + mergedContig_fasta_filename + " - | samtools sort - " + consolidated_junction_reads_bam +
                         " || : ") # cant afford for this to fail due to lack of evidence reads

            consolidated_junction_reads_bam += ".bam"

            lcmd_commands.append( Command.Command( str_cur_command = cmdstr,
                                                   lstr_cur_dependencies = fusion_junction_reads_list +
                                                   [summary_junctions_reads_list_filename],
                                                   lstr_cur_products = [ consolidated_junction_reads_bam ] ) )
            
            lcmd_commands.append ( Command.Command( str_cur_command = "samtools index " + consolidated_junction_reads_bam,
                                                    lstr_cur_dependencies = [ consolidated_junction_reads_bam ],
                                                    lstr_cur_products = [ consolidated_junction_reads_bam + ".bai" ] ) )

            if args_parsed.prep_for_IGV:
                self.bam_to_bed(consolidated_junction_reads_bam, lcmd_commands)


            ## Spanning reads

            summary_spanning_reads_list_filename = fusion_summary_file + ".fusion_spanning_read_accs"
            cmdstr = str(os.sep.join([UTILDIR, "column_extractions.pl"]) +
                         " " + fusion_summary_file +
                         " LeftGene,RightGene,SpanningFrags " +
                         " > " + summary_spanning_reads_list_filename)
            
            lcmd_commands.append( Command.Command( str_cur_command = cmdstr,
                                                   lstr_cur_dependencies = [ fusion_summary_file ],
                                                   lstr_cur_products = [ summary_spanning_reads_list_filename ] ) )
            
            ## //TODO: Separate this into two steps: retrieve, then do bam conversion, to ensure retrieval works via exit code.

            consolidated_spanning_reads_bam =  os.sep.join([args_parsed.str_out_dir, args_parsed.out_prefix + ".spanning_reads"])
            cmdstr = str(UTILDIR + "/retrieve_fusion_spanning_reads_by_accession.pl " + summary_spanning_reads_list_filename
                         + " " + ",".join(fusion_spanning_reads_list) +
                         " | samtools view -bT " + mergedContig_fasta_filename + " - | samtools sort - " + consolidated_spanning_reads_bam +
                         " || : ") # again, cant afford for this to fail due to lack of evidence reads.

            consolidated_spanning_reads_bam += ".bam"

            lcmd_commands.append( Command.Command( str_cur_command = cmdstr,
                                                   lstr_cur_dependencies = fusion_spanning_reads_list +
                                                   [summary_spanning_reads_list_filename],
                                                   lstr_cur_products = [ consolidated_spanning_reads_bam ] ) )
            
            lcmd_commands.append ( Command.Command( str_cur_command = "samtools index " + consolidated_spanning_reads_bam,
                                                    lstr_cur_dependencies = [ consolidated_spanning_reads_bam ],
                                                    lstr_cur_products = [ consolidated_spanning_reads_bam + ".bai" ] ) )

            if args_parsed.prep_for_IGV:
                self.bam_to_bed(consolidated_spanning_reads_bam, lcmd_commands)


            # consolidate all fusion-contig aligned reads into a single bam file
            consolidated_bam_file =  os.sep.join([args_parsed.str_out_dir, args_parsed.out_prefix  + ".consolidated"])

            cmdstr = str(UTILDIR + "/consolidate_bams_and_uniq_reads.pl " +
                         workdir_mergedContig_fasta_filename + " " +
                         ",".join(bam_files_list) + " " +
                          consolidated_bam_file)

            consolidated_bam_file += ".cSorted.bam"

            lcmd_commands.append( Command.Command( str_cur_command = cmdstr,
                                                   lstr_cur_dependencies = bam_files_list + [workdir_mergedContig_fasta_filename],
                                                   lstr_cur_products = [ consolidated_bam_file ] ) )
            


            workdir_consolidated_bam_file = os.sep.join([workdir, args_parsed.out_prefix  + ".consolidated.bam"])
            lcmd_commands.append( Command.Command( str_cur_command = "ln -s " + consolidated_bam_file +
                                                   " " + workdir_consolidated_bam_file,
                                                   lstr_cur_dependencies = [ consolidated_bam_file ],
                                                   lstr_cur_products = [ workdir_consolidated_bam_file ] ) )



            


            if args_parsed.include_Trinity:


                ############################
                # run genome-guided Trinity
                ############################


                trinity_out_dir = os.sep.join([workdir, "trinity_GG"])
                trinity_fasta_filename = trinity_out_dir + "/Trinity-GG.fasta"

                cmdstr = str(TRINITY_HOME + "/Trinity --genome_guided_bam " + workdir_consolidated_bam_file +
                             " --max_memory 30G --genome_guided_max_intron 1000000 --CPU " +  str(args_parsed.CPU) + " --min_contig_length 50 " +
                             " --output " + trinity_out_dir)

                lcmd_commands.append( Command.Command( str_cur_command = cmdstr,
                                                       lstr_cur_dependencies = [ consolidated_bam_file ],
                                                       lstr_cur_products = [ trinity_fasta_filename ] ) )

                ## Run TrinityGG, reconstruct fusion transcripts locally via de novo assembly
                trinGG_fusion_gff3 = self.add_trinfusion_gmap_subpipe(args_parsed, workdir_mergedContig_fasta_filename,
                                                                      workdir_mergedContig_gtf_filename, trinity_fasta_filename, lcmd_commands, workdir)

                # merge de novo assembly fusion results w/ read-based fusion results:
                fusion_summary_w_trinity = fusion_summary_min_score_thresh_file + ".wTrinityGG"
                cmdstr = str(UTILDIR + "/add_TrinityGG_to_fusion_summary.pl " + fusion_summary_min_score_thresh_file +
                             " " + trinGG_fusion_gff3 +
                             " > " + fusion_summary_w_trinity)

                lcmd_commands.append( Command.Command( str_cur_command = cmdstr,
                                                       lstr_cur_dependencies = [ fusion_summary_min_score_thresh_file, trinGG_fusion_gff3 ],
                                                       lstr_cur_products = [ fusion_summary_w_trinity ]
                                                       ) )

                fusion_summary_min_score_thresh_file = fusion_summary_w_trinity  ## NOTE, VARIABLE REPLACEMENT HERE INCL TRINITY RESULTS

            elif args_parsed.prep_for_IGV:
                ## just make the coords file

                cmdstr = str(TRINITY_HOME + "/util/support_scripts/SAM_to_frag_coords.pl --sam " + workdir_consolidated_bam_file +
                             " --max_insert_size 100000 "); 

                lcmd_commands.append( Command.Command( str_cur_command = cmdstr,
                                                       lstr_cur_dependencies = [ workdir_consolidated_bam_file ],
                                                       lstr_cur_products = [ workdir_consolidated_bam_file + ".frag_coords" ]
                                                       ) )

            if args_parsed.prep_for_IGV:

                ## Prep IGV fusion junction view

                frag_coords_file = workdir_consolidated_bam_file + ".frag_coords"
                igv_junc_view_file = os.sep.join([args_parsed.str_out_dir, args_parsed.out_prefix + ".igv.FusionJuncSpan"])

                cmdstr = str(UTILDIR + "/fusion_summary_to_igv_JuncSpan_fmt.pl " + fusion_summary_file + " " +
                            frag_coords_file + " > " + igv_junc_view_file)

                lcmd_commands.append( Command.Command( str_cur_command = cmdstr,
                                                       lstr_cur_dependencies = [ fusion_summary_file, frag_coords_file ],
                                                       lstr_cur_products = [ igv_junc_view_file ] ) )





        ################################################################
        ## Perform some reformatting to get us to the star fusion format
        ################################################################




        # output file has extension: starFfmt

        starFfmt_file = fusion_summary_min_score_thresh_file + ".starFfmt"
        
        cmdstr = str(UTILDIR + "/starfmt_reformatter.pl --fusion_preds " + fusion_summary_min_score_thresh_file +
                     " > " + starFfmt_file)
                     
                
        lcmd_commands.append( Command.Command( str_cur_command = cmdstr,
                                               lstr_cur_dependencies = [ fusion_summary_min_score_thresh_file ],
                                               lstr_cur_products = [ starFfmt_file ] ) )
        
        


        ####################
        ## Add splicing info
        ####################

        preds_including_splice_info_file = starFfmt_file + ".wSpliceInfo"

        cmdstr = str(UTILDIR + "/append_breakpoint_junction_info_via_FI_contigs.pl " +
                     starFfmt_file + " " +
                     mergedContig_fasta_filename +
                     " > " + preds_including_splice_info_file)

        lcmd_commands.append( Command.Command( str_cur_command = cmdstr,
                                               lstr_cur_dependencies = [ starFfmt_file,
                                                                         mergedContig_fasta_filename ],
                                               lstr_cur_products = [ preds_including_splice_info_file ] ) )
        

        

        ################################################
        ## Score and filter the final fusion predictions
        ################################################

        final_fusions_file = os.sep.join([args_parsed.str_out_dir, args_parsed.out_prefix + ".fusion_predictions"])
        
        cmdstr = str(UTILDIR + "/../FusionFilter/blast_and_promiscuity_filter.pl " +
                     " --fusion_preds " + preds_including_splice_info_file +
                     " --out_prefix " + final_fusions_file +
                     " --genome_lib_dir " + args_parsed.genome_lib_dir +
                     " --max_promiscuity " + str(args_parsed.max_promiscuity) +
                     " -E " + str(args_parsed.Evalue) )
                
        lcmd_commands.append( Command.Command( str_cur_command = cmdstr,
                                               lstr_cur_dependencies = [ preds_including_splice_info_file ],
                                               lstr_cur_products = [ final_fusions_file + ".final"] ) )
        
                
        ## make an abridged version that lacks the list of supporting reads.
        
        cmdstr = str(UTILDIR + "/column_exclusions.pl " + final_fusions_file + ".final" +
                     " JunctionReads,SpanningFrags,CounterFusionLeftReads,CounterFusionRightReads " +
                     " > " + final_fusions_file + ".final.abridged");
        
        lcmd_commands.append( Command.Command( str_cur_command = cmdstr,
                                               lstr_cur_dependencies = [ final_fusions_file + ".final" ],
                                               lstr_cur_products = [ final_fusions_file + ".final.abridged"] ) )

        ## add FFPM calculations
        cmdstr = str( os.path.sep.join([UTILDIR, "incorporate_FFPM_into_final_report.pl"]) +
                      " " + args_parsed.left_fq_filename +
                      " " + final_fusions_file + ".final.abridged" +
                      " > " + final_fusions_file + ".final.abridged.FFPM" )
        lcmd_commands.append( Command.Command( str_cur_command = cmdstr,
                                               lstr_cur_dependencies = [ final_fusions_file + ".final.abridged",
                                                                         args_parsed.left_fq_filename ],
                                               lstr_cur_products = [ final_fusions_file + ".final.abridged.FFPM" ] ) )
        
        
        if args_parsed.prep_for_IGV:
            ## generate the fusion-inspector-web galaxy js 

            cmdstr = str( os.path.sep.join( [ UTILDIR, "create_fusion_inspector_igvjs.py" ] ) +
                          " --fusion_inspector_directory " + args_parsed.str_out_dir +
                          " --json_outfile " + os.path.sep.join( [ args_parsed.str_out_dir, args_parsed.out_prefix + ".fusion_inspector_web.json" ] ) +
                          " --file_prefix " + args_parsed.out_prefix )
            
            if args_parsed.include_Trinity:
                cmdstr = cmdstr + " --include_Trinity"

            
            lcmd_commands.append( Command.Command( str_cur_command = cmdstr,
                                                   lstr_cur_dependencies = [args_parsed.str_out_dir],
                                                   lstr_cur_products = [ os.path.sep.join([args_parsed.str_out_dir, args_parsed.out_prefix + ".fusion_inspector_web.json"]) ] ) )

        


        ## cleanup
        if not args_parsed.no_cleanup:

            workdir_cleaned_file = os.path.sep.join([args_parsed.str_out_dir, "workdir.cleaned"])
            cmdstr = "/bin/rm -rf " + workdir + " && touch " + workdir_cleaned_file
            lcmd_commands.append( Command.Command( str_cur_command = cmdstr,
                                                   lstr_cur_dependencies = [workdir],
                                                   lstr_cur_products = [workdir_cleaned_file]) )
            
        
        return lcmd_commands



    def get_fusion_and_spanning_reads (self, args_parsed, mergedContig_gtf_filename, mergedContig_fasta_filename, bam_file, lcmd_commands):
        
        ## extract the fusion JUNCTION reads
        fusion_junction_reads_sam_file = bam_file + ".fusion_junc_reads.sam"
        fusion_junction_info_file = bam_file + ".fusion_junction_info"
        
        cmdstr = str(os.sep.join([UTILDIR, "get_fusion_JUNCTION_reads_from_fusion_contig_bam.pl"]) +
                     " --gtf_file " + mergedContig_gtf_filename +
                     " --MIN_ALIGN_PER_ID " + str(args_parsed.min_per_id) +
                     " --bam " + bam_file + " > " + fusion_junction_reads_sam_file)

        lcmd_commands.append( Command.Command (str_cur_command = cmdstr,
                                              lstr_cur_dependencies = [ mergedContig_gtf_filename, bam_file ],
                                              lstr_cur_products = [ fusion_junction_reads_sam_file, fusion_junction_info_file ] ) )

        if args_parsed.write_intermediate_results:
            self.sort_sam_to_bam(fusion_junction_reads_sam_file, mergedContig_fasta_filename, lcmd_commands)

            ## convert the fusion JUNCTION reads sam file to bed format
            fusion_junction_reads_bed_file = bam_file + ".fusion_junc_reads.bed"
            cmdstr = str(TRINITY_HOME + "/util/misc/SAM_to_bed.pl " + fusion_junction_reads_sam_file +
                         " > " + fusion_junction_reads_bed_file)

            lcmd_commands.append( Command.Command ( str_cur_command = cmdstr,
                                                   lstr_cur_dependencies = [ fusion_junction_reads_sam_file ],
                                                   lstr_cur_products = [ fusion_junction_reads_bed_file ] ) )

            self.sort_and_index_bed(fusion_junction_reads_bed_file, lcmd_commands)
        


        ## extract the fusion SPANNING reads
        fusion_spanning_reads_sam_file = bam_file + ".fusion_span_reads.sam"
        fusion_spanning_reads_info_file = bam_file + ".fusion_spanning_info"

        cmdstr = str(os.sep.join([UTILDIR, "get_fusion_SPANNING_reads_from_bam.from_chim_summary.pl"]) + 
                     " --gtf_file " + mergedContig_gtf_filename +
                     " --MIN_ALIGN_PER_ID " + str(args_parsed.min_per_id) +
                     " --bam " + bam_file +
                     " --junction_info " + fusion_junction_info_file + 
                     " > " + fusion_spanning_reads_sam_file)

        lcmd_commands.append( Command.Command (str_cur_command = cmdstr,
                                              lstr_cur_dependencies = [ mergedContig_gtf_filename, bam_file, fusion_junction_info_file ],
                                              lstr_cur_products = [ fusion_spanning_reads_sam_file, fusion_spanning_reads_info_file ] ) )

        if args_parsed.write_intermediate_results:
            self.sort_sam_to_bam(fusion_spanning_reads_sam_file, mergedContig_fasta_filename, lcmd_commands)

            ## convert the fusion JUNCTION reads sam file to bed format
            fusion_spanning_reads_bed_file = bam_file + ".fusion_span_reads.bed"
            cmdstr = str(TRINITY_HOME + "/util/misc/SAM_pair_to_bed.pl " + fusion_spanning_reads_sam_file +
                         " > " + fusion_spanning_reads_bed_file)

            lcmd_commands.append( Command.Command ( str_cur_command = cmdstr,
                                                   lstr_cur_dependencies = [ fusion_spanning_reads_sam_file ],
                                                   lstr_cur_products = [ fusion_spanning_reads_bed_file ] ) )



            self.sort_and_index_bed(fusion_spanning_reads_bed_file, lcmd_commands)






    def sort_and_index_bed(self, bed_file, lcmd_commands):


        # sort by contig name followed by coordinate
        sorted_bed_file = bed_file + ".sorted.bed"

        cmdstr = str("sort -k1,1 -k2,2n " + bed_file + " > " + sorted_bed_file)
        lcmd_commands.append( Command.Command (str_cur_command = cmdstr,
                                               lstr_cur_dependencies = [ bed_file ],
                                               lstr_cur_products = [ sorted_bed_file ] ) )


        # index using tabix (preferred for IGV-web)
        cmdstr = str("bgzip -f " + sorted_bed_file)
        lcmd_commands.append( Command.Command (str_cur_command = cmdstr,
                                               lstr_cur_dependencies = [ sorted_bed_file ],
                                               lstr_cur_products = [ sorted_bed_file + ".gz" ] ) )

        cmdstr = str("tabix -p bed " + sorted_bed_file + ".gz")
        lcmd_commands.append( Command.Command (str_cur_command = cmdstr,
                                               lstr_cur_dependencies = [ sorted_bed_file + ".gz" ],
                                               lstr_cur_products = [ sorted_bed_file + ".gz.tbi" ] ) )


        return





    def sort_sam_to_bam(self, fusion_junction_reads_sam_file, mergedContig_fasta_filename, lcmd_commands):

        cmdstr = str("set -o pipefail & samtools view -bT " + mergedContig_fasta_filename + " " + fusion_junction_reads_sam_file +
                     " | samtools sort - " + fusion_junction_reads_sam_file)

        lcmd_commands.append( Command.Command( str_cur_command = cmdstr,
                                               lstr_cur_dependencies = [ fusion_junction_reads_sam_file ],
                                               lstr_cur_products = [ fusion_junction_reads_sam_file + ".bam" ] ) )

        # index it
        cmdstr = str("samtools index " + fusion_junction_reads_sam_file + ".bam")

        lcmd_commands.append( Command.Command( str_cur_command = cmdstr,
                                               lstr_cur_dependencies = [ fusion_junction_reads_sam_file + ".bam" ],
                                               lstr_cur_products = [ fusion_junction_reads_sam_file + ".bam.bai" ] ) )

        return



    def bam_to_bed(self, bam_file, lcmd_commands):
        ## convert the reads bam file to bed format
        cmdstr = str(TRINITY_HOME + "/util/misc/SAM_pair_to_bed.pl " + bam_file +
                     " > " + bam_file + ".bed")
        
        lcmd_commands.append( Command.Command ( str_cur_command = cmdstr,
                                                lstr_cur_dependencies = [ bam_file ],
                                                lstr_cur_products = [ bam_file + ".bed" ] ) )
        
        
        self.sort_and_index_bed(bam_file + ".bed", lcmd_commands)

        return


    
    def add_trinfusion_gmap_subpipe(self, args_parsed, mergedContig_fasta_filename, mergedContig_gtf_filename, trinity_fasta_filename, lcmd_commands, workdir):

        gmap_gff3_output_filename = os.sep.join([workdir, args_parsed.out_prefix + ".gmap_trinity_GG.gff3"])

        cmdstr = str(TRINITY_HOME + "/util/misc/process_GMAP_alignments_gff3_chimeras_ok.pl " +
                     "--genome " + mergedContig_fasta_filename + " --transcripts " + trinity_fasta_filename +
                     " --no_chimera > " + gmap_gff3_output_filename)

        lcmd_commands.append( Command.Command (str_cur_command = cmdstr,
                                               lstr_cur_dependencies = [ mergedContig_fasta_filename, trinity_fasta_filename ],
                                               lstr_cur_products = [ gmap_gff3_output_filename ] ) )
        
        
        ## extract the Trinity fusion transcripts
        trinity_fusion_trans_filename = os.sep.join([args_parsed.str_out_dir, args_parsed.out_prefix + ".gmap_trinity_GG.fusions.gff3"])
        cmdstr = str(os.sep.join([UTILDIR, "get_Trinity_fusion_alignments_from_gff3.pl"]) + " " + mergedContig_gtf_filename +
                     " " + gmap_gff3_output_filename + " > " + trinity_fusion_trans_filename)
        lcmd_commands.append( Command.Command( str_cur_command = cmdstr,
                                               lstr_cur_dependencies = [ mergedContig_gtf_filename, gmap_gff3_output_filename ],
                                               lstr_cur_products = [ trinity_fusion_trans_filename ] ) )



        ## extract the Trinity Fusion transcripts
        trinityGG_fusion_fasta = os.sep.join([args_parsed.str_out_dir, args_parsed.out_prefix + ".gmap_trinity_GG.fusions.fasta"])
        cmdstr = str(os.sep.join([UTILDIR, "get_Trinity_fusion_fasta_seqs.pl"]) + " " + trinity_fasta_filename + " " + trinity_fusion_trans_filename +
                     " > " + trinityGG_fusion_fasta)
        lcmd_commands.append( Command.Command( str_cur_command = cmdstr,
                                               lstr_cur_dependencies = [ trinity_fasta_filename, trinity_fusion_trans_filename ],
                                               lstr_cur_products = [ trinityGG_fusion_fasta ] ) )
    
        
                    


        
        # convert fusion trans to bed
        trinity_fusion_trans_bed_filename = trinity_fusion_trans_filename + ".bed"
        min_per_id = 95
        cmdstr = str(UTILDIR + "/transcript_gff3_to_bed.pl " + trinity_fusion_trans_filename +
                     " " + str(min_per_id) + " > " + trinity_fusion_trans_bed_filename)
        lcmd_commands.append( Command.Command( str_cur_command = cmdstr,
                                               lstr_cur_dependencies = [ trinity_fusion_trans_filename ],
                                               lstr_cur_products = [ trinity_fusion_trans_bed_filename ] ) )

        self.sort_and_index_bed(trinity_fusion_trans_bed_filename, lcmd_commands)

        
        
        

        return (trinity_fusion_trans_filename) # trinGG fusion gff3 file w/ breakpoints encoded


    
if __name__ == "__main__":

    # Needed to run, calls the script
    FusionInspector().func_run_pipeline()

